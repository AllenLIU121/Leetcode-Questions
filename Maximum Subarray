# DP
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        pre = 0
        maxAns = nums[0]
        
        for n in nums:
            pre = max(pre+n, n)
            maxAns = max(pre,maxAns)
        
        return maxAns

# Divide and Conquer
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n==1:
            return nums[0]
        else:
            max_left = self.maxSubArray(nums[0:n//2])
            max_right = self.maxSubArray(nums[n//2:n])
        
        tmp = nums[0]
        max_ = tmp
        for i in range(1,n):
            if tmp > 0:
                tmp += nums[i]
            else:
                tmp = nums[i]
            max_ = max(tmp,max_)
            
        return max(max_left,max_right, max_)
